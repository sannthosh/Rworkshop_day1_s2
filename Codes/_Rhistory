View(CTDF.dev)
## Scoring syntax
CTDF.dev$predict.class <- predict(m1, CTDF.dev, type="class")
CTDF.dev$predict.score <- predict(m1, CTDF.dev)
View(CTDF.dev)
head(CTDF.dev)
## deciling code
decile <- function(x){
deciles <- vector(length=10)
for (i in seq(0.1,1,.1)){
deciles[i*10] <- quantile(x, i, na.rm=T)
}
return (
ifelse(x<deciles[1], 1,
ifelse(x<deciles[2], 2,
ifelse(x<deciles[3], 3,
ifelse(x<deciles[4], 4,
ifelse(x<deciles[5], 5,
ifelse(x<deciles[6], 6,
ifelse(x<deciles[7], 7,
ifelse(x<deciles[8], 8,
ifelse(x<deciles[9], 9, 10
))))))))))
}
class(CTDF.dev$predict.score)
## deciling
CTDF.dev$deciles <- decile(CTDF.dev$predict.score[,2])
View(CTDF.dev)
x1
x1<-c(0.5,1.0,2.3,5.6,8.9)
class(x1)
print(x1)
x1
x2<-c(TRUE,FALSE,TRUE,FALSE,FALSE)
class(x2)
x3<-c(T,F,T,T,T)
class(x3)
x4<-c("dog","cat","rat","bag","bag")
class(x4)
x8<-c(0.5,1.0,2.3,5.6,8.9,"dog")
class(x8)
x6=as.factor(x8)
x6
class(x6)
table(x6)
x5<-c(1:5)
class(x5)
x7<-as.factor(x5)
x<-as.numeric(x7)
x6<-c(1+0i,NA,2+2i,4+1i,6+55i)
df <-data.frame(x1,x2,x3,x4,x5,x6,x7)
df
df$x4
x8<-c(0.5,1.0,2.3,5.6,8.9,"dog")
class(x8)
x6=as.factor(x8)
x6
x1<-c(0.5,1.0,2.3,5.6,8.9)
x2<-c(TRUE,FALSE,TRUE,FALSE,FALSE)
x3<-c(T,F,T,T,T)
x4<-c("dog","cat","rat","bag","bag")
x5<-c(1:5)
x7<-as.factor(x5)
x7
x6<-c(1+0i,NA,2+2i,4+1i,6+55i)
df <-data.frame(x1,x2,x3,x4,x5,x6,x7)
df
x1<-c(2.5,1.4,6.3,4.6,9)
x1
x1
x1<-c(2.5,1.4,6.3,4.6,9)
x1
class(x1)
mode(x1)
length(x1)
x2<-c(TRUE,FALSE,TRUE,FALSE,FALSE)
class(x2)
mode(Myfirstvector)
mode(x2)
length(x2)
x3<-c("DataMining","Statistics","Analytics","Projects","MachineLearning")
class(x3)
length(x3)
x4<-c(2,5,1,6,3,4,6,9,0)
class(x4)
mode(x4)
length(x4)
x5<-c(1L,2L,3L)
x5
class(x5)
#--------
#
Myfirstvector <- c(1,2,3,4,5)
Myfirstvector
class(Myfirstvector)
#COMBINING VECTORS INTO r THROUGH C-----will see theat in the functions.All mathematical operations in R happe in the double mode it automatically stores all integers in double.
is.numeric(Myfirstvector)
is.integer(Myfirstvector)
is.double(Myfirstvector)
v1 <- c(1L,2L)
v1
is.integer(v1)
v3 <- c("a","b","c","hello",7)
v3
is.character(v3)
#seq-- similar like :-------
seq(1,15)
1:15
seq(1:15)
seq(1,15,3)
z <- seq(1,15,4)
z
v3
#rep-----replicate
rep(3,150)
rep("a",5)
rep(v3,4)
#----------------
x <- c(1,123,444,4)
w <- c("a","b","c","d","e")
w
w[1]
w[-2]
w[1:3]
w[4:5]
w[6]
w[5:1]
w[c(1,3,5)]
w[c(1,4)]
w[c(1,1,1)]
w[-5]
w[-4]
w[-6]
x8<-c(0.5,1.0,2.3,5.6,8.9,"dog")
class(x8)
x6=as.factor(x8)
x6
x8<-c(0.5,1.0,2.3,5.6,8.9,8.9,"dog")
class(x8)
x6=as.factor(x8)
x6
x <- list(1, "a", TRUE, 1 + (0+4i))
x
head(iris,n=10)
list1<-list(a=iris[1:3,1:2],b=iris[4:7,2:3],c=head(iris),d=tail(iris))
list1
typeof(d)
class(a)
list1[[1]][[2]][1]
list1$a
#numeric vector
x <- c(54, 62, 71, 48)
#select first element
x[1]
#select third and 1st element
x[c(3, 1)]
#1st element twice
x[c(1, 1)]
#drop first element
x[-1]
#drop 2 elements
x[-c(1, 5)]
#selection using logical operatos
x[c(TRUE, TRUE, FALSE, FALSE)]
#logical operator
x[x > 60]
#using which operator
x[which(x > 70)]
#null operator
x[]
#create a list
x <- as.list(100:110)
x
#first four elements
x[1:4]
# to get element 5
x[[5]]
f <- function(x) x
f
formals(f)
environment(f)
x <- 5
f <- function() {
y <- 10
c(x = x, y = y)
}
f()
x <- 5
g <- function() {
x <- 20
y <- 10
c(x = x, y = y)
}
g()
x <- 5
h <- function() {
y <- 10
i <- function() {
z <- 20
c(x = x, y = y, z = z)
}
i()
}
h()
#Multiplications----------
N <- 100
N
a <- rnorm(N)
a
a <- rnorm(N)
a
setwd("C:/Users/Dhanasekaran N/Desktop")
a <- 10
a
x <- 100
x
print(x)
x1<-c(2.5,1.4,6.3,4.6,9)
x1
class(x1)
mode(x1)
length(x1)
x2<-c(TRUE,FALSE,TRUE,FALSE,FALSE)
class(x2)
mode(x2)
mode(Myfirstvector)
length(x2)
x3<-c("DataMining","Statistics","Analytics","Projects","MachineLearning")
class(x3)
length(x3)
x4<-c(2,5,1,6,3,4,6,9,0)
class(x4)
mode(x4)
length(x4)
x5<-c(1L,2L,3L)
x5
class(x5)
#--------
#
Myfirstvector <- c(1,2,3,4,5)
Myfirstvector
class(Myfirstvector)
#COMBINING VECTORS INTO r THROUGH C-----will see theat in the functions.All mathematical operations in R happe in the double mode it automatically stores all integers in double.
is.numeric(Myfirstvector)
is.integer(Myfirstvector)
is.character(Myfirstvector)
is.double(Myfirstvector)
v1 <- c(1L,2L)
v1
is.integer(v1)
v3 <- c("a","b","c","hello",7)
v3
is.character(v3)
#seq-- similar like :-------
seq(1,15)
#seq-- similar like :-------
seq(1,15)
1:15
#seq-- similar like :-------
seq(10,15)
seq(1,15,3)
z <- seq(1,15,4)
z
v3
#rep-----replicate
rep(3,150)
rep("a",5)
rep(v3,4)
rep(v3,4,each=3)
rep(v7,4)
rep(v3,4,each=3)
#----------------
x <- c(1,123,444,4)
w <- c("a","b","c","d","e")
w
w[-2]
w[1:3]
w[c(1,3,5)]
w[c(1,4)]
w[c(1,1,1)]
w[-5]
w[-4]
w[-6]
w[6]
w[6]
#--------------------------
m1 <- matrix(nrow = 4, ncol = 4)
m1
class(m1)
mode(m1)
dim(m1)
m1 <- matrix(1:16,nrow = 4, ncol = 4)
m1
m2 <- 1:16
dim(m2) <- c(4,4)
m2
data <- c(1:20)
data
A <- matrix(data,4,5)
A
A[2,3]
B <- matrix(data,4,5,byrow = T)
B
x <- 1:8
y <- 9:16
cbind(x, y)
x <- 1:8
y <- 9:16
cbind(x, y)
rbind(x,y)
x1<-c(0.5,1.0,2.3,5.6,8.9)
class(x1)
print(x1)
x1
x2<-c(TRUE,FALSE,TRUE,FALSE,FALSE)
class(x2)
x3<-c(T,F,T,T,T)
class(x3)
x4<-c("dog","cat","rat","bag","bag")
class(x4)
x8<-c(0.5,1.0,2.3,5.6,8.9,8.9,"dog")
class(x8)
x6=as.factor(x8)
x6
class(x6)
table(x6)
x5<-c(1:5)
class(x5)
x7<-as.factor(x5)
x<-as.numeric(x7)
x6<-c(1+0i,NA,2+2i,4+1i,6+55i)
class(x6)
x6
x
m1 <- matrix(nrow = 4, ncol = 4)
m1
dim(m1)
m1 <- matrix(1:16,nrow = 4, ncol = 4)
m1
m2 <- 1:16
dim(m2) <- c(4,4)
m2
x <- 1:8
y <- 9:16
cbind(x, y)
rbind(x,y)
m <- matrix(1:16, nrow = 4, ncol = 4, byrow = TRUE,
dimnames = list(c("row1", "row2","row3","row4"),
c("C.1", "C.2", "C.3","C.4")))
m
x8<-c(0.5,1.0,2.3,5.6,8.9,8.9,"dog")
class(x8)
x6=as.factor(x8)
x6
x1<-c(0.5,1.0,2.3,5.6,8.9)
x2<-c(TRUE,FALSE,TRUE,FALSE,FALSE)
x3<-c(T,F,T,T,T)
x4<-c("dog","cat","rat","bag","bag")
x5<-c(1:5)
x7<-as.factor(x5)
x7
x6<-c(1+0i,NA,2+2i,4+1i,6+55i)
df <-data.frame(x1,x2,x3,x4,x5,x6,x7)
df
x <- 10
print(x)
x
x <- 100
x
setwd("C:/Users/Dhanasekaran N/Desktop/iPrimed/Technical 1/DAY4/Codes")
x1<-c(2.5,1.4,6.3,4.6,9)
x1
class(x1)
mode(x1)
x2<-c(TRUE,FALSE,TRUE,FALSE,FALSE)
class(x2)
mode(x2)
mode(Myfirstvector)
length(x2)
x3<-c("DataMining","Statistics","Analytics","Projects","MachineLearning")
class(x3)
length(x3)
x4<-c(2,5,1,6,3,4,6,9,0)
class(x4)
mode(x4)
length(x4)
x5<-c(1L,2L,3L)
x5
class(x5)
#--------
#
Myfirstvector <- c(1,2,3,4,5)
Myfirstvector
class(Myfirstvector)
#COMBINING VECTORS INTO r THROUGH C-----will see theat in the functions.All mathematical operations in R happe in the double mode it automatically stores all integers in double.
is.numeric(Myfirstvector)
is.integer(Myfirstvector)
is.character(Myfirstvector)
is.double(Myfirstvector)
v1 <- c(1L,2L)
v1
is.integer(v1)
v3 <- c("a","b","c","hello",7)
v3
is.character(v3)
#seq-- similar like :-------
seq(1,15)
1:15
seq(1,15,3)
z <- seq(1,15,4)
z
v3
v3 <- c("a","b","c","hello",7)
v3
is.character(v3)
#rep-----replicate
rep(3,150)
rep("a",5)
v3
rep(v3,4)
rep(v3,4,each=3)
w <- c("a","b","c","d","e")
w <- c("a","b","c","d","e")
w
w[1]
w[-2]
w[1:3]
w[4:5]
w[6]
w[5:1]
w[c(1,3,5)]
w[c(1,5,3)]
w[c(1,4)]
w[c(1,1,1)]
w[-5]
w[-4]
w[-6]
w[6]
#--------------------------
m1 <- matrix(nrow = 4, ncol = 4)
m1
class(m1)
mode(m1)
dim(m1)
m1 <- matrix(1:16,nrow = 4, ncol = 4)
m1
class(m1)
mode(m1)
dim(m1)
m1 <- matrix(1:16,nrow = 4, ncol = 4)
m1
m2 <- 1:16
dim(m2)
dim(m2) <- c(4,4)
m2
data <- c(1:20)
data
A <- matrix(data,4,5)
A
A <- matrix(data,4,4)
A
A <- matrix(data,4,5)
A
A[2,3]
B <- matrix(data,4,5,byrow = T)
B
x <- 1:8
y <- 9:16
cbind(x, y)
x <- 1:8
y <- 9:16
cbind(x, y)
rbind(x,y)
x8<-c(0.5,1.0,2.3,5.6,8.9,8.9,"dog")
class(x8)
x6=as.factor(x8)
x6
x8 = c(2,3,2,3,2,3,2)
x6=as.factor(x8)
x6
x1<-c(0.5,1.0,2.3,5.6,8.9)
x2<-c(TRUE,FALSE,TRUE,FALSE,FALSE)
x3<-c(T,F,T,T,T)
x4<-c("dog","cat","rat","bag","bag")
x5<-c(1:5)
x7<-as.factor(x5)
x7
x6<-c(1+0i,NA,2+2i,4+1i,6+55i)
df <-data.frame(x1,x2,x3,x4,x5,x6,x7)
df
df$x4
#select rows based on column x1
df[df$x1 == 2.3, ]
#select rows
df[c(1, 3), ]
#select columns x1 and x4
df[c("x1", "x4")]
#subset like a matrix
df[, c("x1", "x4")]
#difference in matrix subset
df[,"x1"] #dataframe subset
df["x1"] #matrix subset
f <- function(x) x
f
formals(f)
environment(f)
x <- 5
f <- function() {
y <- 10
c(x = x, y = y)
}
f()
